
name: Build

on:
  push:
    branches:
      - 'master'
      - 'feature/**'
      - 'pr/**'
    paths-ignore:
      - 'CHANGES'
      - 'CODEOWNERS'
      - 'doc/**'
      - 'openvdb_maya/**'
      - 'openvdb_houdini/**'
      - 'openvdb_ax/**'
      - 'nanovdb/**'
      - 'pendingchanges/**'
      - '**.md'
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - 'CHANGES'
      - 'CODEOWNERS'
      - 'doc/**'
      - 'openvdb_maya/**'
      - 'openvdb_houdini/**'
      - 'openvdb_ax/**'
      - 'nanovdb/**'
      - 'pendingchanges/**'
      - '**.md'

jobs:
  linux-vfx:
    runs-on: ubuntu-latest
    name: >
      linux-vfx:${{ matrix.config.image }}-
      abi:${{ matrix.config.abi }}-
      cxx:${{ matrix.config.cxx }}-
      type:${{ matrix.config.build }}
    container:
      image: aswf/ci-openvdb:${{ matrix.config.image }}
    env:
      CXX: ${{ matrix.config.cxx }}
      CCACHE_DIR: /tmp/ccache
    strategy:
      matrix:
        config:
          - { cxx: clang++, image: '2022-clang11', abi: '9', build: 'Release' }
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: timestamp
      id: timestamp
      shell: bash
      run: echo "::set-output name=timestamp::`date -u +'%Y-%m-%dT%H:%M:%SZ'`"
    - name: ccache
      # don't use ccache for debug builds
      if: matrix.config.build == 'Release'
      id: ccache
      uses: actions/cache@v2
      with:
        path: /tmp/ccache
        key: linux-vfx${{ matrix.config.image }}-abi${{ matrix.config.abi }}-${{ matrix.config.cxx }}-${{ steps.timestamp.outputs.timestamp }}
        restore-keys: linux-vfx${{ matrix.config.image }}-abi${{ matrix.config.abi }}-${{ matrix.config.cxx }}-
    - name: build
      run: >
        ./ci/build.sh -v
        --build-type=${{ matrix.config.build }}
        --components=\"core,test\"
        --cargs=\"-DOPENVDB_TESTS=PointRasterizeFrustum -DUSE_EXPLICIT_INSTANTIATION=OFF -DOPENVDB_CXX_STRICT=ON -DOPENVDB_ABI_VERSION_NUMBER=${{ matrix.config.abi }}\"
    - name: test
      run: |
        cd build && ctest -V
        cd - && ./ci/test_install.sh

  # Extra compiler tests
  linux-cxx17:
    runs-on: ubuntu-20.04
    name: linux-cxx17:${{ matrix.config.cxx }}
    env:
      CXX: ${{ matrix.config.cxx }}
    strategy:
      matrix:
        config:
          - { cxx: 'g++-10',     j: '1' }
          - { cxx: 'clang++-10', j: '2' }
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: update_apt
      run: sudo apt-get update
    - name: install
      run: >
        sudo apt-get -q install -y
        libboost-dev libboost-system-dev libboost-iostreams-dev libboost-python-dev
        libglfw3-dev libtbb-dev libgtest-dev libcppunit-dev libglu1-mesa-dev
    - name: build
      run: >
        ./ci/build.sh -v
        --build-type=Release
        -j ${{ matrix.config.j }}
        --components=\"core,test\"
        --cargs=\"
        -DUSE_BLOSC=OFF
        -DOPENVDB_TESTS=PointRasterizeFrustum
        -DUSE_EXPLICIT_INSTANTIATION=OFF
        -DCMAKE_CXX_STANDARD=17
        -DOPENVDB_ABI_VERSION_NUMBER=9
        -DCMAKE_INSTALL_PREFIX=`pwd`
        \"
    - name: test
      run: cd build && ctest -V
